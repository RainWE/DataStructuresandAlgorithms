package per.algo.dac;

public class Hanoitower {

    public static void main(String[] args) {
        hanoiTower(5, 'A', 'B', 'C');
    }

    //汉诺塔的移动的方法
    //使用分治算法

	/**
	 *
	 * @param num
	 * @param a 起始盘
	 * @param b 辅助盘
	 * @param c 目标盘
	 */
    public static void hanoiTower(int num, char a, char b, char c) {
        //如果只有一个盘
        if (num == 1) {
            System.out.println("第1个盘从 " + a + "->" + c);
        } else {
            //如果我们有 n >= 2 情况，我们总是可以看做是两个盘 1.最下边的一个盘 2. 上面的所有盘
            //1. 先把 最上面的所有盘 A->B， 移动过程会使用到 c
            hanoiTower(num - 1, a, c, b);
            //2. 把最下边的盘 A->C
            System.out.println("第" + num + "个盘从 " + a + "->" + c);
            //3. 把B塔的所有盘 从 B->C , 移动过程使用到 a塔
            hanoiTower(num - 1, b, a, c);

        }
    }

    public static void hanoiTower_1(int num, char a, char b, char c) {
        if (num == 1) {
            System.out.println("第1个盘从 " + a + "->" + c);
        } else {
            hanoiTower_1(num - 1, a, c, b);
            System.out.println("第" + num + "个盘从 " + a + "->" + c);
            hanoiTower_1(num - 1, b, a, c);
        }
    }

    public static void hanoiTower_2(int num, char a, char b, char c) {
        if (num == 1) {
            System.out.println("第1个盘从 " + a + "->" + c);
        } else {
            hanoiTower_2(num - 1, a, c, b);
            System.out.println("第" + num + "个盘从 " + a + "->" + c);
            hanoiTower_2(num - 1, b, a, c);
        }
    }

    public static void hanoiTower_3(int num, char a, char b, char c) {
		if(num==1){
			System.out.println("第一个盘从"+a+"->"+c);
		}else {
			hanoiTower_3(num-1,a,c,b);
			System.out.println("第"+num+"个盘从"+a+"->"+c);
			hanoiTower_3(num-1,b,a,c);
		}
    }

    public static void hanoiTower_4(int num, char a, char b, char c) {
		if(num==1){
			System.out.println("第一个盘从"+a+"->"+c);
		}else {
			hanoiTower_4(num-1,a,c,b);
			System.out.println("第"+num+"个盘从"+a+"->"+c);
			hanoiTower_4(num-1,b,a,c);
		}
    }
    public static void hanoiTower_5(int num, char a, char b, char c) {
		if(num==1){
			System.out.println("第一个盘从"+a+"->"+c);
		}else {
			hanoiTower_5(num-1,a,c,b);
			System.out.println("第"+num+"个盘从"+a+"->"+c);
			hanoiTower_5(num-1,b,a,c);
		}
    }
 	public static void hanoiTower_6(int num, char a, char b, char c) {
		if(num==1){
			System.out.println("第一个盘从"+a+"->"+c);
		}else {
			hanoiTower_6(num-1,a,c,b);
			System.out.println("第"+num+"个盘从"+a+"->"+c);
			hanoiTower_6(num-1,b,a,c);
		}
    }
 	public static void hanoiTower_7(int num, char a, char b, char c) {
		if(num==1){
			System.out.println("第一个盘从"+a+"->"+c);
		}else {
			hanoiTower_7(num-1,a,c,b);
			System.out.println("第"+num+"个盘从"+a+"->"+c);
			hanoiTower_7(num-1,b,a,c);
		}
    }
 	public static void hanoiTower_8(int num, char a, char b, char c) {
		if(num==1){
			System.out.println("第一个盘从"+a+"->"+c);
		}else {
			hanoiTower_8(num-1,a,c,b);
			System.out.println("第"+num+"个盘从"+a+"->"+c);
			hanoiTower_8(num-1,b,a,c);
		}
    }
 	public static void hanoiTower_9(int num, char a, char b, char c) {
		if(num==1){
			System.out.println("第一个盘从"+a+"->"+c);
		}else {
			hanoiTower_9(num-1,a,c,b);
			System.out.println("第"+num+"个盘从"+a+"->"+c);
			hanoiTower_9(num-1,b,a,c);
		}
    }

}
